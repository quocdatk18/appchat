import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Conversation, ConversationDocument } from './conversation.schema';
import { User, UserDocument } from 'src/user/user.schema';
import { Message, MessageDocument } from 'src/message/message.schema';

@Injectable()
export class ConversationService {
  constructor(
    @InjectModel(Conversation.name)
    private conversationModel: Model<ConversationDocument>,
    @InjectModel(User.name) private userModel: Model<UserDocument>,
    @InjectModel(Message.name) private messageModel: Model<MessageDocument>,
  ) {}

  // üß© T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi (1-1 ho·∫∑c nh√≥m)
  async createConversation(
    userId: string,
    receiverId: string | string[],
    isGroup = false,
    groupName = '',
    content?: string,
    type: string = 'text',
    mediaUrl: string = '',
  ): Promise<ConversationDocument> {
    if (!isGroup) {
      // S·ª≠a: convert userId v√† receiverId sang ObjectId ƒë·ªÉ members lu√¥n l√† ObjectId
      const userObjId = new Types.ObjectId(userId);
      const receiverObjId = new Types.ObjectId(receiverId as string);
      // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ cu·ªôc tr√≤ chuy·ªán 1-1 gi·ªØa 2 ng∆∞·ªùi (ch·ªâ ƒë√∫ng 2 th√†nh vi√™n, kh√¥ng ph·∫£i group)
      const existing = await this.conversationModel.findOne({
        isGroup: false,
        members: { $all: [userObjId, receiverObjId] },
        $expr: { $eq: [{ $size: '$members' }, 2] },
      });
      if (existing) return existing;

      // T·∫°o cu·ªôc tr√≤ chuy·ªán 1-1 m·ªõi n·∫øu ch∆∞a c√≥
      const newConversation = await new this.conversationModel({
        isGroup: false,
        members: [userObjId, receiverObjId],
        createdBy: userObjId,
      }).save();

      // T·∫°o message ƒë·∫ßu ti√™n n·∫øu c√≥ content ho·∫∑c mediaUrl
      if (content || mediaUrl) {
        await this.messageModel.create({
          conversationId: newConversation._id,
          senderId: userObjId,
          content,
          type,
          mediaUrl,
        });
      }

      return newConversation;
    }

    // üßë‚Äçü§ù‚Äçüßë T·∫°o nh√≥m
    const receivers = Array.isArray(receiverId) ? receiverId : [receiverId];
    const allMembers = [...new Set([userId, ...receivers])]; // Lo·∫°i b·ªè tr√πng
    if (allMembers.length < 3) {
      throw new Error('Nh√≥m ph·∫£i c√≥ √≠t nh·∫•t 3 ng∆∞·ªùi');
    }

    const groupConversation = new this.conversationModel({
      isGroup: true,
      name: groupName || 'Nh√≥m kh√¥ng t√™n',
      members: allMembers,
      createdBy: userId,
    });

    return groupConversation.save();
  }

  // L·∫•y danh s√°ch c√°c ƒëo·∫°n chat c·ªßa user (sidebar, h·ªó tr·ª£ c·∫£ nh√≥m)
  async getUserConversations(userId: string): Promise<any[]> {
    const conversations = await this.conversationModel.aggregate([
      { $match: { members: { $in: [new Types.ObjectId(userId)] } } },
      { $sort: { updatedAt: -1 } },
      // L·∫•y last message
      {
        $lookup: {
          from: 'messages',
          let: { convId: '$_id' },
          pipeline: [
            { $match: { $expr: { $eq: ['$conversationId', '$$convId'] } } },
            { $sort: { createdAt: -1 } },
            { $limit: 1 },
          ],
          as: 'lastMessage',
        },
      },
      { $unwind: { path: '$lastMessage', preserveNullAndEmptyArrays: true } },
      // L·∫•y th√¥ng tin receiver (ng∆∞·ªùi c√≤n l·∫°i) cho 1-1
      {
        $addFields: {
          receiverId: {
            $cond: [
              { $eq: ['$isGroup', false] },
              {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: '$members',
                      as: 'member',
                      cond: { $ne: ['$$member', new Types.ObjectId(userId)] },
                    },
                  },
                  0,
                ],
              },
              null,
            ],
          },
        },
      },
      // L·∫•y th√¥ng tin receiver cho 1-1
      {
        $lookup: {
          from: 'users',
          localField: 'receiverId',
          foreignField: '_id',
          as: 'receiver',
        },
      },
      { $unwind: { path: '$receiver', preserveNullAndEmptyArrays: true } },
      // L·∫•y preview members cho nh√≥m
      {
        $lookup: {
          from: 'users',
          localField: 'members',
          foreignField: '_id',
          as: 'memberPreviews',
        },
      },
      // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      {
        $project: {
          _id: 1,
          isGroup: 1,
          name: 1,
          avatar: 1,
          receiver: { _id: 1, username: 1, avatar: 1 }, // ch·ªâ cho 1-1
          members: 1,
          memberPreviews: { _id: 1, username: 1, avatar: 1 }, // preview cho nh√≥m
          lastMessage: '$lastMessage.content',
          updatedAt: 1,
        },
      },
    ]);
    return conversations;
  }

  async findOneByMembers(userIds: string[]): Promise<any> {
    const objIds = userIds.map((id) => new Types.ObjectId(id));
    const result = await this.conversationModel.findOne({
      isGroup: false,
      members: { $all: objIds, $size: 2 },
    });
    return result;
  }

  // ‚úÖ L·∫•y chi ti·∫øt m·ªôt ƒëo·∫°n chat
  async getConversationById(id: string): Promise<Conversation> {
    const conv = await this.conversationModel
      .findById(id)
      .populate('members', 'username avatar email');
    if (!conv) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ƒëo·∫°n chat');
    return conv;
  }

  // X√≥a cu·ªôc tr√≤ chuy·ªán theo id
  async deleteConversation(
    conversationId: string,
  ): Promise<{ deleted: boolean }> {
    const result = await this.conversationModel.deleteOne({
      _id: conversationId,
    });
    return { deleted: result.deletedCount === 1 };
  }

  // T√¨m ki·∫øm h·ªôi tho·∫°i theo t√™n ho·∫∑c username th√†nh vi√™n
  async searchConversation(userId: string, query: string): Promise<any[]> {
    const conversations = await this.conversationModel.aggregate([
      { $match: { members: { $in: [new Types.ObjectId(userId)] } } },
      {
        $lookup: {
          from: 'users',
          localField: 'members',
          foreignField: '_id',
          as: 'memberPreviews',
        },
      },
      // Th√™m tr∆∞·ªùng otherMembers: lo·∫°i b·ªè ch√≠nh b·∫°n
      {
        $addFields: {
          otherMembers: {
            $filter: {
              input: '$memberPreviews',
              as: 'member',
              cond: { $ne: ['$$member._id', new Types.ObjectId(userId)] },
            },
          },
        },
      },
      // L·ªçc theo t√™n nh√≥m ho·∫∑c username c·ªßa th√†nh vi√™n kh√°c
      {
        $match: {
          $or: [
            { name: { $regex: query, $options: 'i' } },
            { 'otherMembers.username': { $regex: query, $options: 'i' } },
          ],
        },
      },
      {
        $project: {
          _id: 1,
          isGroup: 1,
          name: 1,
          avatar: 1,
          members: 1,
          memberPreviews: { _id: 1, username: 1, avatar: 1 },
          updatedAt: 1,
        },
      },
      { $sort: { updatedAt: -1 } },
    ]);
    return conversations;
  }
}
// t√¨m ki·∫øm ƒëo·∫°n chat
