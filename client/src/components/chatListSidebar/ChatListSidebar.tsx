'use client';
import { AppDispatch, RootState } from '@/lib/store';
import {
  fetchConversations,
  searchConversation,
  setSelectedConversation,
  setSelectedUser,
  deleteConversationForUser,
} from '@/lib/store/reducer/conversationSlice/conversationSlice';
import {
  searchUserByEmail,
  setSelectedUser as setUserSelected,
} from '@/lib/store/reducer/user/userSlice';
import { UserType } from '@/types';
import { SearchOutlined, DeleteOutlined } from '@ant-design/icons';
import { Input, List, Skeleton, Modal, message } from 'antd';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import styles from './ChatListSidebar.module.scss';
import formatUpdatedAt from './format';

export default function ChatListSidebar() {
  const dispatch = useDispatch<AppDispatch>();
  const conversations = useSelector((state: RootState) => state.conversationReducer.conversations);
  const [searchText, setSearchText] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const searchResults = useSelector((state: RootState) => state.conversationReducer.searchResults);
  const selectedConversation = useSelector(
    (state: RootState) => state.conversationReducer.selectedConversation
  );
  const currentUser = useSelector((state: RootState) => state.userReducer.user);
  const selectedUser = useSelector((state: RootState) => state.userReducer.selectedUser);

  const handleSearch = async (value: string) => {
    setSearchText(value);
    if (!value.trim()) {
      setIsSearching(false);
      return;
    }
    setIsSearching(true); // B·∫Øt ƒë·∫ßu loading
    // H√†m ki·ªÉm tra c√≥ ph·∫£i email kh√¥ng
    const isEmail = (str: string) => /\S+@\S+\.\S+/.test(str);

    if (isEmail(value)) {
      // T√¨m user theo email b·∫±ng thunk
      try {
        const result = await dispatch(searchUserByEmail(value));
        const user =
          typeof result.payload === 'object' && result.payload && '_id' in result.payload
            ? result.payload
            : null;
        if (user) {
          // Ki·ªÉm tra ƒë√£ c√≥ conversation v·ªõi user n√†y ch∆∞a
          const existing = conversations.find((c) => c.receiver?._id === user._id);
          if (existing) {
            dispatch(setSelectedConversation(existing));
          } else {
            // Ch∆∞a c√≥, ch·ªâ setSelectedUser, KH√îNG setSelectedConversation(null)
            dispatch(setUserSelected(user));
          }
        } else {
          // Kh√¥ng t√¨m th·∫•y user, ch·ªâ setSelectedUser(null)
          dispatch(setSelectedUser(null));
        }
      } catch (err) {
        dispatch(setSelectedUser(null));
      } finally {
        setIsSearching(false); // K·∫øt th√∫c loading
      }
    } else {
      // T√¨m ki·∫øm h·ªôi tho·∫°i theo name
      try {
        await dispatch(searchConversation(value));
      } finally {
        setIsSearching(false); // K·∫øt th√∫c loading
      }
    }
  };

  // üîê ch·ªçn user
  const handleSelectUser = (user: UserType) => {
    // C·∫≠p nh·∫≠t user ƒëang ch·ªçn v√†o Redux
    dispatch(setSelectedUser(user));
    // T√¨m conversation ƒë√£ c√≥ v·ªõi user n√†y
    const existing = conversations.find((c) => c.receiver?._id === user._id);
    if (existing) {
      dispatch(setSelectedConversation(existing));
    } else {
      dispatch(setSelectedConversation(null)); // Ch∆∞a c√≥, ch·ªâ hi·ªán khung tr·∫Øng
    }
  };

  // üîê ch·ªçn conversation
  const handleSelect = (id: string) => {
    const conversation = conversations.find((c) => c._id === id);
    if (conversation && conversation.receiver) {
      dispatch(setSelectedConversation(conversation));
      // √âp receiver v·ªÅ UserType, ch·ªâ l·∫•y c√°c tr∆∞·ªùng h·ª£p l·ªá
      const receiver: UserType = {
        _id: conversation.receiver._id || '',
        username: conversation.receiver.username || '',
        avatar: conversation.receiver.avatar || '',
        online:
          typeof (conversation.receiver as any).online === 'boolean'
            ? (conversation.receiver as any).online
            : false,
      };
      dispatch(setSelectedUser(receiver));
    }
  };

  // H√†m xo√° h·ªôi tho·∫°i
  const handleDeleteConversation = (conversationId: string) => {
    Modal.confirm({
      title: 'X√°c nh·∫≠n xo√° h·ªôi tho·∫°i',
      content:
        'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° ƒëo·∫°n h·ªôi tho·∫°i n√†y? ƒêo·∫°n chat s·∫Ω b·ªã ·∫©n kh·ªèi danh s√°ch c·ªßa b·∫°n.',
      okText: 'Xo√°',
      cancelText: 'Hu·ª∑',
      onOk: async () => {
        try {
          await dispatch<any>(deleteConversationForUser(conversationId));
          message.success('ƒê√£ xo√° h·ªôi tho·∫°i!');
        } catch {
          message.error('Xo√° h·ªôi tho·∫°i th·∫•t b·∫°i!');
        }
      },
    });
  };

  useEffect(() => {
    dispatch(fetchConversations());
  }, [dispatch]);

  const isEmail = (str: string) => /\S+@\S+\.\S+/.test(str);

  const isEmailSearch = isEmail(searchText);

  function getListData() {
    if (isSearching) return [];
    if (isEmailSearch) return selectedUser ? [selectedUser] : [];
    if (searchText) return searchResults;
    // ·∫®n c√°c conversation m√† deletedBy ch·ª©a user hi·ªán t·∫°i
    const userId = currentUser?._id || '';
    return conversations.filter((c) => !c.deletedBy || !c.deletedBy.includes(userId));
  }
  const listData = getListData();

  return (
    <div className={styles.chatListSidebar}>
      <div className={styles.header}>
        <Input.Search
          placeholder="T√¨m ki·∫øm"
          value={searchText}
          onChange={(e) => handleSearch(e.target.value)}
          style={{ marginBottom: 16 }}
        />
        {isSearching && (
          <div>
            {[...Array(4)].map((_, idx) => (
              <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }} key={idx}>
                <Skeleton.Avatar active size="large" shape="circle" style={{ marginRight: 12 }} />
                <Skeleton
                  active
                  title={false}
                  paragraph={{ rows: 2, width: ['60%', '40%'] }}
                  style={{ flex: 1 }}
                />
              </div>
            ))}
          </div>
        )}
      </div>

      <div className={styles.chatList}>
        {isSearching ? (
          <div>
            {[...Array(4)].map((_, idx) => (
              <div style={{ display: 'flex', alignItems: 'center', marginBottom: 16 }} key={idx}>
                <Skeleton.Avatar active size="large" shape="circle" style={{ marginRight: 12 }} />
                <Skeleton
                  active
                  title={false}
                  paragraph={{ rows: 2, width: ['60%', '40%'] }}
                  style={{ flex: 1 }}
                />
              </div>
            ))}
          </div>
        ) : (
          <>
            <List
              dataSource={listData}
              renderItem={(item: any) => {
                // N·∫øu l√† user t√¨m theo email (kh√¥ng c√≥ isGroup)
                if (!item.isGroup && !item.lastMessage && item.email) {
                  return (
                    <List.Item onClick={() => handleSelectUser(item)}>
                      <div className={styles.userSearchResult}>
                        <img
                          src={item.avatar || '/avtDefault.png'}
                          alt="avatar"
                          className={styles.avatar}
                        />
                        <div className={styles.userInfo}>
                          <div className={styles.name}>{item.nickname || item.username}</div>
                          <div className={styles.email}>{item.email}</div>
                        </div>
                      </div>
                    </List.Item>
                  );
                }
                // N·∫øu l√† h·ªôi tho·∫°i
                // L·∫•y t√™n v√† avatar ng∆∞·ªùi nh·∫≠n t·ª´ memberPreviews (kh√°c currentUser._id)
                const receiver = item.memberPreviews?.find(
                  (user: any) => user._id !== currentUser?._id
                );
                const receiverName = receiver ? receiver.nickname || receiver.username : '';
                const receiverAvatar = receiver ? receiver.avatar : '';
                return (
                  <List.Item
                    actions={[
                      <DeleteOutlined
                        key="delete"
                        style={{ color: '#ff4d4f' }}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteConversation(item._id);
                        }}
                      />,
                    ]}
                    onClick={() => handleSelect(item._id)}
                  >
                    <img
                      src={receiverAvatar || '/avtDefault.png'}
                      alt="avatar"
                      className={styles.avatar}
                    />
                    <div className={styles.chatInfo}>
                      <div className={styles.name}>{receiverName}</div>
                      <div className={styles.message}>{item.lastMessage}</div>
                    </div>
                    <div className={styles.time}>
                      {item.updatedAt ? formatUpdatedAt(item.updatedAt) : ''}
                    </div>
                  </List.Item>
                );
              }}
            />
            {/* Th√¥ng b√°o kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng khi t√¨m ki·∫øm b·∫±ng email */}
            {searchText && isEmailSearch && listData.length === 0 && (
              <div className={styles.notFoundBlock}>
                <div className={styles.notFoundIcon}>
                  <SearchOutlined />
                </div>
                <div className={styles.notFoundTitle}>Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng</div>
                <div className={styles.notFoundDesc}>email ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n.</div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}
